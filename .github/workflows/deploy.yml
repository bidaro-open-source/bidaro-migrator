name: Deploy

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release-github:
    name: Create GitHub release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Apply version
        run: |
          rg='^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$'
          commit=$(git log --pretty=format:%s -n 1)
          version=$(echo "$commit" | sed -E 's/^release: ?//; s/v([0-9a-zA-Z.-]+)( #[0-9]+)?/\1/; s/ #[0-9]+//')

          if [[ $version =~ $rg ]]; then
            is_latest=$([[ -z "${BASH_REMATCH[5]:-}" ]] && echo "yes" || echo "no")

            echo "APP_VERSION=$version" >> $GITHUB_ENV
            echo "APP_VERSION_IS_LATEST=$is_latest" >> $GITHUB_ENV
          else
            echo "Parsed version: '$version'"
            echo "Commit message: '$commit'"
            exit 1
          fi

      - name: Create a release tag
        run: |
          git tag "$APP_VERSION"
          git push origin "refs/tags/$APP_VERSION"

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create $APP_VERSION \
            --title "$APP_VERSION" \
            --notes "Please refer to the [documentation](https://bidaro-open-source.github.io/changelog/)." \
            $([[ "$APP_VERSION_IS_LATEST" == "yes" ]] && echo "--latest" || echo "--prerelease")

  release-docker:
    name: Create docker release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Apply version
        run: |
          rg='^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$'
          commit=$(git log --pretty=format:%s -n 1)
          version=$(echo "$commit" | sed -E 's/^release: ?//; s/v([0-9a-zA-Z.-]+)( #[0-9]+)?/\1/; s/ #[0-9]+//')

          if [[ $version =~ $rg ]]; then
            is_latest=$([[ -z "${BASH_REMATCH[5]:-}" ]] && echo "yes" || echo "no")

            echo "APP_VERSION=$version" >> $GITHUB_ENV
            echo "APP_VERSION_IS_LATEST=$is_latest" >> $GITHUB_ENV
          else
            echo "Parsed version: '$version'"
            echo "Commit message: '$commit'"
            exit 1
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ format('{0}/{1}:{2}', secrets.DOCKERHUB_USERNAME, secrets.DOCKERHUB_REPOSITORY, env.APP_VERSION) }}
            ${{ env.APP_VERSION_IS_LATEST == 'yes' && format('{0}/{1}:latest', secrets.DOCKERHUB_USERNAME, secrets.DOCKERHUB_REPOSITORY) || null }}
